{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Form","state","feedback","name","department","rating","employeeName","event","setState","target","value","e","update","preventDefault","entry","newEntry","id","length","push","btnDisable","this","className","type","onChange","onClick","disabled","map","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4QAGMA,E,4MACJC,MAAQ,CACNC,SAAU,GACVC,KAAM,GACNC,WAAY,GACZC,OAAQ,K,EAGVC,aAAe,SAACC,GACd,EAAKC,SAAS,CAAEL,KAAMI,EAAME,OAAOC,S,EAErCN,WAAa,SAACO,GACZ,EAAKH,SAAS,CAAEJ,WAAYO,EAAEF,OAAOC,S,EAEvCL,OAAS,SAACM,GACR,IAAMN,EAASM,EAAEF,OAAOC,MACxB,EAAKF,SAAS,CAAEH,Y,EAElBO,OAAS,SAACD,GACRA,EAAEE,iBACF,IAAMC,EAAK,YAAO,EAAKb,MAAMC,UACvBa,EAAW,CACfC,GAAIF,EAAMG,OAAS,EACnBd,KAAM,EAAKF,MAAME,KACjBC,WAAY,EAAKH,MAAMG,WACvBC,OAAQ,EAAKJ,MAAMI,QAErBS,EAAMI,KAAKH,GACX,EAAKP,SAAS,CAAEN,SAAUY,EAAOX,KAAM,GAAIC,WAAY,GAAIC,OAAQ,M,4CAErE,WACE,IAAMc,EACgB,KAApBC,KAAKnB,MAAME,MACe,KAA1BiB,KAAKnB,MAAMG,YACW,KAAtBgB,KAAKnB,MAAMI,OACb,OACE,sBAAKgB,UAAU,YAAf,UACE,wDACA,8BACE,uBAAMA,UAAU,WAAhB,UACE,0CAEE,uBACEC,KAAK,OACLZ,MAAOU,KAAKnB,MAAME,KAClBoB,SAAUH,KAAKd,kBAGnB,gDAEE,uBACEgB,KAAK,OACLZ,MAAOU,KAAKnB,MAAMG,WAClBmB,SAAUH,KAAKhB,gBAGnB,4CAEE,uBACEkB,KAAK,SACLZ,MAAOU,KAAKnB,MAAMI,OAClBkB,SAAUH,KAAKf,YAGnB,wBAAQmB,QAASJ,KAAKR,OAAQa,SAAUN,EAAxC,yBAKJ,qBAAKE,UAAU,cAAf,SACGD,KAAKnB,MAAMC,SAASwB,KAAI,SAAChB,GAAD,OACvB,+BACG,IADH,SAESA,EAAMP,KAFf,IAEqB,kCAFrB,gBAE2CO,EAAMN,WAAY,IAC3D,kCAHF,YAGoBM,EAAML,SAHjBK,EAAMM,gB,GAvERW,aAkFJ3B,ICzEA4B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c0f07a30.chunk.js","sourcesContent":["import \"./App.css\";\nimport { Component } from \"react\";\n\nclass Form extends Component {\n  state = {\n    feedback: [],\n    name: \"\",\n    department: \"\",\n    rating: \"0\",\n  };\n\n  employeeName = (event) => {\n    this.setState({ name: event.target.value });\n  };\n  department = (e) => {\n    this.setState({ department: e.target.value });\n  };\n  rating = (e) => {\n    const rating = e.target.value;\n    this.setState({ rating });\n  };\n  update = (e) => {\n    e.preventDefault();\n    const entry = [...this.state.feedback];\n    const newEntry = {\n      id: entry.length + 1,\n      name: this.state.name,\n      department: this.state.department,\n      rating: this.state.rating,\n    };\n    entry.push(newEntry);\n    this.setState({ feedback: entry, name: \"\", department: \"\", rating: \"\" });\n  };\n  render() {\n    const btnDisable =\n      this.state.name === \"\" ||\n      this.state.department === \"\" ||\n      this.state.rating === \"\";\n    return (\n      <div className=\"container\">\n        <h1>EMPLOYEE FEEDBACK FORM</h1>\n        <div>\n          <form className=\"feedback\">\n            <label>\n              Name:\n              <input\n                type=\"text\"\n                value={this.state.name}\n                onChange={this.employeeName}\n              />\n            </label>\n            <label>\n              Department:\n              <input\n                type=\"text\"\n                value={this.state.department}\n                onChange={this.department}\n              />\n            </label>\n            <label>\n              Rating:\n              <input\n                type=\"number\"\n                value={this.state.rating}\n                onChange={this.rating}\n              />\n            </label>\n            <button onClick={this.update} disabled={btnDisable}>\n              Submit\n            </button>\n          </form>\n        </div>\n        <div className=\"newFeedback\">\n          {this.state.feedback.map((value) => (\n            <h2 key={value.id}>\n              {\" \"}\n              Name: {value.name} <b>|</b> Department: {value.department}{\" \"}\n              <b>|</b> Rating: {value.rating}\n            </h2>\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\nexport default Form;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}